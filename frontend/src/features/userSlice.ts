import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../app/store';
import axios from "axios";

export const fetchAsyncCreateUser = createAsyncThunk(
  "user/post",
  async (user: { name: string }) => {
    const res = await axios.post(`/users/`, user, {
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${localStorage.token}`,
      },
    });
    return res.data;
  }
);
export const fetchAsyncUpdateUser = createAsyncThunk(
  "user/put",
  async (user: Omit<User, "email" | "password" | "token">) => {
    console.log("fetchAsyncUpdateUser")
    const res = await axios.put(`/users/${user.id}/`, user, {
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${localStorage.token}`,
      },
    });

    console.log("fetchAsyncUpdateUser res.data", res.data)
    return res.data;
  }
);
export const fetchAsyncDeleteUser = createAsyncThunk(
  "user/delete",
  async (id: number) => {
    await axios.delete(`/users/${id}/`, {
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${localStorage.token}`,
      },
    });
    return id;
  }
);

export const fetchAsyncGetUsers = createAsyncThunk(
  "user/get",
  async () => {
    const res = await axios.get(`/users`, {
      headers: {
        "Content-Type": "application/json",
      },
    });

    return res.data.users;
  });

type User = {
  id: number;
  name: string;
  email: string;
  password: string;
  token?: string;
};

// profileを型で固める
export interface UserState {
  users: Omit<User, "password">[];
  editedUser: Omit<User, "email" | "password" | "token">
  status: 'idle' | 'loading' | 'failed';
}

const initialState: UserState = {
  users: [],
  editedUser: {
    id: 0,
    name: "",
  },
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    editUser(state, action) {
      state.editedUser = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAsyncGetUsers.fulfilled, (state, action) => {
        return {
          ...state,
          users: action.payload,
        }
      });

    builder.addCase(fetchAsyncUpdateUser.fulfilled, (state, action) => {
      return {
        ...state,
        users: state.users.map((user) =>
          user.id === action.payload.user.id ? action.payload.user : user
        ),
      };
    });

    // builder
    //   .addCase(incrementAsync.pending, (state) => {
    //     state.status = 'loading';
    //   })
    //   .addCase(incrementAsync.fulfilled, (state, action) => {
    //     state.status = 'idle';
    //     state.value += action.payload;
    //   })
    //   .addCase(incrementAsync.rejected, (state) => {
    //     state.status = 'failed';
    //   });
  },
});

export const { editUser } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectUsers = (state: RootState) => state.user; で良いのではないか？？？
export const selectUsers = (state: RootState) => state.user.users;
export const selectEditedUser = (state: RootState) => state.user.editedUser;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//     (dispatch, getState) => {
//       const currentValue = selectCount(getState());
//       if (currentValue % 2 === 1) {
//         dispatch(incrementByAmount(amount));
//       }
//     };

export default userSlice.reducer;
