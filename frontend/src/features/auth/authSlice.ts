import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import axios from "axios";

export const fetchAsyncLogin = createAsyncThunk(
  "login/post",
  async (user: { email: string, password: string }) => {
    const res = await axios.post(`/auth/login`, user, {
      headers: {
        "Content-Type": "application/json",
      },
    });

    return res.data.user;
  });


export const fetchAsyncGetProfile = createAsyncThunk(
  "profile/get",
  async () => {
    console.log("localStorage.token", localStorage.token)
    const res = await axios.get(`/auth/profile`, {
      headers: {
        Authorization: `Bearer ${localStorage.token}`,
      },
    });


    return res.data.user;
  }
);

type User = {
  id: number;
  name: string;
  email: string;
  password: string;
  token?: string;
};

// profileを型で固める
export interface AuthState {
  profile: Omit<User, "password">;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: AuthState = {
  profile: {
    id: 0,
    name: "",
    email: "",
    token: "",
  },
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAsyncLogin.fulfilled, (state, action) => {
        // console.log("fetchAsyncLogin.fulfilled")
        // console.log("action.payload.name", action.payload.name)
        localStorage.setItem("token", action.payload.token);
        // state.profile.username = action.payload.name;

        return {
          ...state,
          profile: action.payload,
        }
      });
    builder
      .addCase(fetchAsyncGetProfile.fulfilled, (state, action) => {
        return {
          ...state,
          profile: action.payload,
        };
      });
    // builder
    //   .addCase(incrementAsync.pending, (state) => {
    //     state.status = 'loading';
    //   })
    //   .addCase(incrementAsync.fulfilled, (state, action) => {
    //     state.status = 'idle';
    //     state.value += action.payload;
    //   })
    //   .addCase(incrementAsync.rejected, (state) => {
    //     state.status = 'failed';
    //   });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectProfile = (state: RootState) => state.auth.profile;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//     (dispatch, getState) => {
//       const currentValue = selectCount(getState());
//       if (currentValue % 2 === 1) {
//         dispatch(incrementByAmount(amount));
//       }
//     };

export default authSlice.reducer;
